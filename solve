#!/bin/bash

# expected file format
#
#prev:{name of previous block}
#level:{level of difficulty}
#contents:{block contents}
#sig:{signature of contents}
#minedby:{thumbprint of signature}
#nonce:{nonce for hash}
#proof:{hash of the block minus the current line}

chainDir="./chainLinks"
pendingDir="$chainDir/pending"

if [ -f "$chainDir/$1" ]; then
 #already solved
 if ( ./verify "$chainDir/$1" ); then
  echo -e "\r\033[1;32m$hash\033[0m"
  exit 0
 else
  echo -e "\r\033[1;31m$hash\033[0m"
  exit 1
 fi
fi

if ! [ -f "$pendingDir/$1" ]; then
 echo >&2 "could not find file $1 in $pendingDir"
 exit 1;
fi

current="$1"
currentFile="$pendingDir/$current"
#todo: ensure file format

hash=$(grep -Po '(?<=proof:)[A-Za-z0-9]+' $currentFile)
nonce=$(grep -Po '(?<=nonce:)[A-Za-z0-9]+' $currentFile)
lvl=$(grep -Po '(?<=level:)[0-9]' $currentFile)

if [ -z "$hash" ] && [ -z "$nonce" ]; then
 #get body
 body=$(sed '/-----END PGP SIGNATURE-----:/q' $currentFile)
 #solve
 while [[ ! "$hash" =~ ^0{$lvl} ]]
 do
  #create new nonce
  nonce=($(echo -n "$i" |md5sum))
  #hash content with updated nonce
  hash=($(echo -ne "$body\nnonce:$nonce" |md5sum))
  echo -ne "\r\033[1;33m$hash\033[0m"
  i=$((i+1))
 done
 #valid hash found; update file with valid nonce/proof
 echo -e "$body\nnonce:$nonce\nproof:$hash" > $currentFile
 echo -e "\r\033[1;32m$hash\033[0m" #valid
 #move solved file to chain
 #todo: consensus, reporting
 mv $currentFile "$chainDir/$current"
else
 if ( ./verify $current ); then
  echo -e "\r\033[1;32m$hash\033[0m" #valid
 else
  echo -e "\r\033[1;31m$hash\033[0m" #invalid
  exit 1
 fi
fi


